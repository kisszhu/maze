文件监控工具File Watcher的设计愿景

在跟用户交流中，我们不谈抽象的领域概念，而是聚焦到具体的用例上。通过构造出一个又一个具体的用例，
来逐步理解抽象的需求。通过一个又一个的用例，来驱动软化开发，这就是“用例驱动开发”。


内部DSL与外部DSL：
内部DSL：指的是通过某种通用的编程语言（称为宿主语言）的语法编写出来的DSL，该DSL语法受制于宿主语言的语法，但不需要额外的规则去解析
外部DSL：是实现自己的新语言，不受任何限制，但工作量大，需要文本解析，构造抽象语法树

动态DSL与静态DSL：
动态DSL：如果用户需要，我们可以向用户提供DSL以方便用户配置，把这类DSL称为动态DSL，用户可以在运行时编辑DSL脚本，不需要重新编译。
一般采用外部DSL（如XML）或者支持动态编译执行的内存DSL（Groovy）。由于Scala属于静态编译语言，无法提供动态DSL（Scala其实也可以提供的，用动态编译的技术）
静态DSL：静态编译语言，可以利用编译器检查语法。最好与产品其他代码保存同一种语言。

一般采用动静结合的DSL方式。


需求描述与技术实现细节分离：
DSL描述了需求，但如何实现则取决于技术实现层面。尽管内部DSL中宿主语言可以直接执行复杂的过程，但如果直接与技术实现细节强耦合，
既不利于适应需求的变化，也限制了技术的选择。




转载自：https://blog.csdn.net/liuwenzhe2008/article/details/52184910









